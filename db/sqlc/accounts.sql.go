// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package db

import (
	"context"
)

const create_account = `-- name: Create_account :one
INSERT INTO accounts (
  owner,
  balance,
  currency
) VALUES (
  $1, $2, $3
) RETURNING id, owner, balance, currency, created_at
`

type Create_accountParams struct {
	Owner    string `json:"owner"`
	Balance  int64  `json:"balance"`
	Currency string `json:"currency"`
}

func (q *Queries) Create_account(ctx context.Context, arg Create_accountParams) (Account, error) {
	row := q.db.QueryRow(ctx, create_account, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const delete_account = `-- name: Delete_account :exec
DELETE FROM accounts
WHERE id = $1
`

func (q *Queries) Delete_account(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, delete_account, id)
	return err
}

const get_account = `-- name: Get_account :one
SELECT id, owner, balance, currency, created_at FROM accounts
WHERE id = $1 LIMIT 1
`

func (q *Queries) Get_account(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, get_account, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const list_accounts = `-- name: List_accounts :many
SELECT id, owner, balance, currency, created_at FROM accounts
ORDER BY id
LIMIT $1
OFFSET $2
`

type List_accountsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) List_accounts(ctx context.Context, arg List_accountsParams) ([]Account, error) {
	rows, err := q.db.Query(ctx, list_accounts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Account{}
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const update_accounts = `-- name: Update_accounts :exec
UPDATE accounts
SET balance = $2
WHERE id = $1
`

type Update_accountsParams struct {
	ID      int64 `json:"id"`
	Balance int64 `json:"balance"`
}

func (q *Queries) Update_accounts(ctx context.Context, arg Update_accountsParams) error {
	_, err := q.db.Exec(ctx, update_accounts, arg.ID, arg.Balance)
	return err
}
